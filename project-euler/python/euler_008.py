"""
Problem 008. 1000자리 수 안에서 연속된 13개 숫자 곱의 최댓값



## 문제
다음은 연속된 1000자리 수입니다 (읽기 좋게 50자리씩 잘라 놓음).

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

여기서 붉게 표시된 71112의 경우 연속한 5개 숫자 7, 1, 1, 1, 2를 모두 곱하면 14입니다.
또, 그 다음 연속한 5개 숫자 11121의 경우 1, 1, 1, 2, 1을 모두 곱하면 2입니다.

이런 식으로 맨 처음 (7 × 3 × 1 × 6 × 7 = 882) 부터 맨 끝 (6 × 3 × 4 × 5 × 0 = 0) 까지 연속한 5개 숫자의 곱을 구할 수 있습니다.

이렇게 구할 수 있는 연속한 5개 숫자의 곱 중에서 가장 큰 값은 40824 입니다.

연속한 4개 숫자의 곱 중에서 가장 큰 값은 파랗게 표시된 9 × 9 × 8 × 9 = 5832 입니다.

위의 1000자리 수에서 연속한 13개 숫자의 곱이 가장 큰 값은 얼마입니까?



## 풀이
### 고차함수 맵과 리듀스(map and reduce)
많은 프로그래밍 언어에서, 맵(map)은 리스트 같은 콜렉션의 각각의 원소에 주어진 함수를 적용하여 결과 콜렉션을 얻는 고차함수이다. 예로 문자열 리스트 ['1', '2', '3', '4', '5']의 각각의 원소에 문자열을 수로 바꾸는 함수를 적용하면 [1, 2, 3, 4, 5]와 같은 결과를 얻을 수 있다. 또 여기에 다시 완전제곱 함수를 적용하면 [1, 4, 9, 16, 25]의 결과를 얻는다.

리듀스(reduce)는 주어진 함수를 콜렉션에 재귀적으로 적용하여 하나의 결과값을 얻는 고차함수이다. 예를 들어, 리스트 [1, 2, 3, 4, 5]에 덧셈 함수(+)를 적용하면 1 + (2 + (3 + (4 + 5))) = 15 또는 (((1 + 2) + 3) + 4) + 5 = 15의 결과를 얻을 수 있다. 리듀스는 프로그래밍 언어에 따라 fold, accumulate, aggregate, compress, inject 등 다양한 이름으로 불린다.

맵과 리듀스는 빅데이타처리를 포함한 병렬처리에 매우 효과적으로 사용된다.



## 출처
https://euler.synap.co.kr/problem=8
"""

import sys
from sys import stdin

mock_data = iter(['7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450'])
readline = lambda: next(mock_data)
sys.stdin.readline = readline
stdin.readline = readline


# ---------- Divider ----------
# Answer


def max_sliding_window_product(num_str: str, window_size: int) -> int:
    num_str = num_str.strip()
    
    total_max: int = 0

    for i in range(0, len(num_str) - window_size + 1):
        window: str = num_str[i:i + window_size]
        
        if '0' in window:
            continue
        
        product: int = 1
        
        for ch in window:
            product *= int(ch)
        
        total_max = max(total_max, product)
    
    return total_max


from sys import stdin

num_str: str = stdin.readline()

max_num: int = max_sliding_window_product(num_str, 13)

print(max_num)
